// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: github.com/amikhailau/users-service/pkg/pb/service.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on VersionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *VersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Version

	return nil
}

// VersionResponseValidationError is the validation error returned by
// VersionResponse.Validate if the designated constraints aren't met.
type VersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionResponseValidationError) ErrorName() string { return "VersionResponseValidationError" }

// Error satisfies the builtin error interface
func (e VersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for Coins

	// no validation rules for Gems

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Password

	return nil
}

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on ReadUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadUserRequestValidationError is the validation error returned by
// ReadUserRequest.Validate if the designated constraints aren't met.
type ReadUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserRequestValidationError) ErrorName() string { return "ReadUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadUserRequestValidationError{}

// Validate checks the field values on ReadUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadUserResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadUserResponseValidationError is the validation error returned by
// ReadUserResponse.Validate if the designated constraints aren't met.
type ReadUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserResponseValidationError) ErrorName() string { return "ReadUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReadUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadUserResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Password

	return nil
}

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUsersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoginRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Password

	return nil
}

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoginResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on GrantCurrenciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GrantCurrenciesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AddCoins

	// no validation rules for AddGems

	return nil
}

// GrantCurrenciesRequestValidationError is the validation error returned by
// GrantCurrenciesRequest.Validate if the designated constraints aren't met.
type GrantCurrenciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantCurrenciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantCurrenciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantCurrenciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantCurrenciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantCurrenciesRequestValidationError) ErrorName() string {
	return "GrantCurrenciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantCurrenciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantCurrenciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantCurrenciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantCurrenciesRequestValidationError{}

// Validate checks the field values on GrantCurrenciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GrantCurrenciesResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GrantCurrenciesResponseValidationError is the validation error returned by
// GrantCurrenciesResponse.Validate if the designated constraints aren't met.
type GrantCurrenciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantCurrenciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantCurrenciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantCurrenciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantCurrenciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantCurrenciesResponseValidationError) ErrorName() string {
	return "GrantCurrenciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantCurrenciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantCurrenciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantCurrenciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantCurrenciesResponseValidationError{}

// Validate checks the field values on StoreItem with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StoreItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Type

	// no validation rules for CoinsPrice

	// no validation rules for GemsPrice

	// no validation rules for ImageId

	return nil
}

// StoreItemValidationError is the validation error returned by
// StoreItem.Validate if the designated constraints aren't met.
type StoreItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreItemValidationError) ErrorName() string { return "StoreItemValidationError" }

// Error satisfies the builtin error interface
func (e StoreItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreItemValidationError{}

// Validate checks the field values on CreateStoreItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStoreItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Type

	// no validation rules for CoinsPrice

	// no validation rules for GemsPrice

	// no validation rules for ImageId

	return nil
}

// CreateStoreItemRequestValidationError is the validation error returned by
// CreateStoreItemRequest.Validate if the designated constraints aren't met.
type CreateStoreItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoreItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoreItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoreItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoreItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoreItemRequestValidationError) ErrorName() string {
	return "CreateStoreItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoreItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoreItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoreItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoreItemRequestValidationError{}

// Validate checks the field values on CreateStoreItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStoreItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoreItemResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateStoreItemResponseValidationError is the validation error returned by
// CreateStoreItemResponse.Validate if the designated constraints aren't met.
type CreateStoreItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoreItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoreItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoreItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoreItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoreItemResponseValidationError) ErrorName() string {
	return "CreateStoreItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoreItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoreItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoreItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoreItemResponseValidationError{}

// Validate checks the field values on ReadStoreItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadStoreItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadStoreItemRequestValidationError is the validation error returned by
// ReadStoreItemRequest.Validate if the designated constraints aren't met.
type ReadStoreItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadStoreItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadStoreItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadStoreItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadStoreItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadStoreItemRequestValidationError) ErrorName() string {
	return "ReadStoreItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadStoreItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadStoreItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadStoreItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadStoreItemRequestValidationError{}

// Validate checks the field values on ReadStoreItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadStoreItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadStoreItemResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadStoreItemResponseValidationError is the validation error returned by
// ReadStoreItemResponse.Validate if the designated constraints aren't met.
type ReadStoreItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadStoreItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadStoreItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadStoreItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadStoreItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadStoreItemResponseValidationError) ErrorName() string {
	return "ReadStoreItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadStoreItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadStoreItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadStoreItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadStoreItemResponseValidationError{}

// Validate checks the field values on UpdateStoreItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateStoreItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoreItemRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoreItemRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateStoreItemRequestValidationError is the validation error returned by
// UpdateStoreItemRequest.Validate if the designated constraints aren't met.
type UpdateStoreItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoreItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoreItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoreItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoreItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoreItemRequestValidationError) ErrorName() string {
	return "UpdateStoreItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoreItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoreItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoreItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoreItemRequestValidationError{}

// Validate checks the field values on UpdateStoreItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateStoreItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoreItemResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateStoreItemResponseValidationError is the validation error returned by
// UpdateStoreItemResponse.Validate if the designated constraints aren't met.
type UpdateStoreItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoreItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoreItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoreItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoreItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoreItemResponseValidationError) ErrorName() string {
	return "UpdateStoreItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoreItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoreItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoreItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoreItemResponseValidationError{}

// Validate checks the field values on DeleteStoreItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteStoreItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteStoreItemRequestValidationError is the validation error returned by
// DeleteStoreItemRequest.Validate if the designated constraints aren't met.
type DeleteStoreItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoreItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoreItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoreItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoreItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoreItemRequestValidationError) ErrorName() string {
	return "DeleteStoreItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoreItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoreItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoreItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoreItemRequestValidationError{}

// Validate checks the field values on DeleteStoreItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteStoreItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteStoreItemResponseValidationError is the validation error returned by
// DeleteStoreItemResponse.Validate if the designated constraints aren't met.
type DeleteStoreItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoreItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoreItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoreItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoreItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoreItemResponseValidationError) ErrorName() string {
	return "DeleteStoreItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoreItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoreItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoreItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoreItemResponseValidationError{}

// Validate checks the field values on ListStoreItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListStoreItemsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStoreItemsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStoreItemsRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStoreItemsRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStoreItemsRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListStoreItemsRequestValidationError is the validation error returned by
// ListStoreItemsRequest.Validate if the designated constraints aren't met.
type ListStoreItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStoreItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStoreItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStoreItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStoreItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStoreItemsRequestValidationError) ErrorName() string {
	return "ListStoreItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStoreItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStoreItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStoreItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStoreItemsRequestValidationError{}

// Validate checks the field values on ListStoreItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListStoreItemsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStoreItemsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStoreItemsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListStoreItemsResponseValidationError is the validation error returned by
// ListStoreItemsResponse.Validate if the designated constraints aren't met.
type ListStoreItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStoreItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStoreItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStoreItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStoreItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStoreItemsResponseValidationError) ErrorName() string {
	return "ListStoreItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStoreItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStoreItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStoreItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStoreItemsResponseValidationError{}

// Validate checks the field values on BuyByUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BuyByUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ItemId

	return nil
}

// BuyByUserRequestValidationError is the validation error returned by
// BuyByUserRequest.Validate if the designated constraints aren't met.
type BuyByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyByUserRequestValidationError) ErrorName() string { return "BuyByUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e BuyByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyByUserRequestValidationError{}

// Validate checks the field values on BuyByUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BuyByUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// BuyByUserResponseValidationError is the validation error returned by
// BuyByUserResponse.Validate if the designated constraints aren't met.
type BuyByUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyByUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyByUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyByUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyByUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyByUserResponseValidationError) ErrorName() string {
	return "BuyByUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuyByUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyByUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyByUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyByUserResponseValidationError{}

// Validate checks the field values on GetUserItemsIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserItemsIdsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetUserItemsIdsRequestValidationError is the validation error returned by
// GetUserItemsIdsRequest.Validate if the designated constraints aren't met.
type GetUserItemsIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserItemsIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserItemsIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserItemsIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserItemsIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserItemsIdsRequestValidationError) ErrorName() string {
	return "GetUserItemsIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserItemsIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserItemsIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserItemsIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserItemsIdsRequestValidationError{}

// Validate checks the field values on GetUserItemsIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserItemsIdsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetUserItemsIdsResponseValidationError is the validation error returned by
// GetUserItemsIdsResponse.Validate if the designated constraints aren't met.
type GetUserItemsIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserItemsIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserItemsIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserItemsIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserItemsIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserItemsIdsResponseValidationError) ErrorName() string {
	return "GetUserItemsIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserItemsIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserItemsIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserItemsIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserItemsIdsResponseValidationError{}

// Validate checks the field values on UserStats with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserStats) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Games

	// no validation rules for Wins

	// no validation rules for Top5

	// no validation rules for Kills

	return nil
}

// UserStatsValidationError is the validation error returned by
// UserStats.Validate if the designated constraints aren't met.
type UserStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStatsValidationError) ErrorName() string { return "UserStatsValidationError" }

// Error satisfies the builtin error interface
func (e UserStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStatsValidationError{}

// Validate checks the field values on ReadUserStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadUserStatsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	return nil
}

// ReadUserStatsRequestValidationError is the validation error returned by
// ReadUserStatsRequest.Validate if the designated constraints aren't met.
type ReadUserStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadUserStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserStatsRequestValidationError) ErrorName() string {
	return "ReadUserStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadUserStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadUserStatsRequestValidationError{}

// Validate checks the field values on ReadUserStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadUserStatsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadUserStatsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadUserStatsResponseValidationError is the validation error returned by
// ReadUserStatsResponse.Validate if the designated constraints aren't met.
type ReadUserStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadUserStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserStatsResponseValidationError) ErrorName() string {
	return "ReadUserStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadUserStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadUserStatsResponseValidationError{}

// Validate checks the field values on UpdateUserStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserStatsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for AddGames

	// no validation rules for AddWins

	// no validation rules for AddTop5

	// no validation rules for AddKills

	return nil
}

// UpdateUserStatsRequestValidationError is the validation error returned by
// UpdateUserStatsRequest.Validate if the designated constraints aren't met.
type UpdateUserStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserStatsRequestValidationError) ErrorName() string {
	return "UpdateUserStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserStatsRequestValidationError{}

// Validate checks the field values on UpdateUserStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserStatsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateUserStatsResponseValidationError is the validation error returned by
// UpdateUserStatsResponse.Validate if the designated constraints aren't met.
type UpdateUserStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserStatsResponseValidationError) ErrorName() string {
	return "UpdateUserStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserStatsResponseValidationError{}

// Validate checks the field values on News with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *News) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewsValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for ImageLink

	return nil
}

// NewsValidationError is the validation error returned by News.Validate if the
// designated constraints aren't met.
type NewsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewsValidationError) ErrorName() string { return "NewsValidationError" }

// Error satisfies the builtin error interface
func (e NewsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNews.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewsValidationError{}

// Validate checks the field values on CreateNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateNewsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for ImageLink

	return nil
}

// CreateNewsRequestValidationError is the validation error returned by
// CreateNewsRequest.Validate if the designated constraints aren't met.
type CreateNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNewsRequestValidationError) ErrorName() string {
	return "CreateNewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNewsRequestValidationError{}

// Validate checks the field values on CreateNewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNewsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNewsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNewsResponseValidationError is the validation error returned by
// CreateNewsResponse.Validate if the designated constraints aren't met.
type CreateNewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNewsResponseValidationError) ErrorName() string {
	return "CreateNewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNewsResponseValidationError{}

// Validate checks the field values on ReadNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadNewsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadNewsRequestValidationError is the validation error returned by
// ReadNewsRequest.Validate if the designated constraints aren't met.
type ReadNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadNewsRequestValidationError) ErrorName() string { return "ReadNewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadNewsRequestValidationError{}

// Validate checks the field values on ReadNewsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadNewsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadNewsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadNewsResponseValidationError is the validation error returned by
// ReadNewsResponse.Validate if the designated constraints aren't met.
type ReadNewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadNewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadNewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadNewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadNewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadNewsResponseValidationError) ErrorName() string { return "ReadNewsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReadNewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadNewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadNewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadNewsResponseValidationError{}

// Validate checks the field values on UpdateNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateNewsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for ImageLink

	return nil
}

// UpdateNewsRequestValidationError is the validation error returned by
// UpdateNewsRequest.Validate if the designated constraints aren't met.
type UpdateNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNewsRequestValidationError) ErrorName() string {
	return "UpdateNewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNewsRequestValidationError{}

// Validate checks the field values on UpdateNewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNewsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateNewsResponseValidationError is the validation error returned by
// UpdateNewsResponse.Validate if the designated constraints aren't met.
type UpdateNewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNewsResponseValidationError) ErrorName() string {
	return "UpdateNewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNewsResponseValidationError{}

// Validate checks the field values on ListNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListNewsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNewsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNewsRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNewsRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNewsRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListNewsRequestValidationError is the validation error returned by
// ListNewsRequest.Validate if the designated constraints aren't met.
type ListNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNewsRequestValidationError) ErrorName() string { return "ListNewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNewsRequestValidationError{}

// Validate checks the field values on ListNewsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListNewsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNewsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNewsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListNewsResponseValidationError is the validation error returned by
// ListNewsResponse.Validate if the designated constraints aren't met.
type ListNewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNewsResponseValidationError) ErrorName() string { return "ListNewsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListNewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNewsResponseValidationError{}
