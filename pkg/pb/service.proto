syntax = "proto3";

package service;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
//import "github.com/infobloxopen/protoc-gen-gorm/types/types.proto";
import "github.com/infobloxopen/atlas-app-toolkit/query/collection_operators.proto";
import "github.com/infobloxopen/protoc-gen-atlas-query-validate/options/query_validate.proto";
import "github.com/infobloxopen/protoc-gen-atlas-validate/options/atlas_validate.proto";


option go_package = "github.com/amikhailau/users-service/pkg/pb;pb";

// The UsersService service, GetVersion RPC, and Version message
// make up a simple "starter" example. It allows the Atlas CLI to generate an
// end-to-end example for the sake of demonstration. Feel free to change 
// GetVersion to better-suit how your versioning system, or get rid of it entirely.

// Here are some helpful resources to aid you in your protobuf quest:
// https://github.com/infobloxopen/atlas-contacts-app/blob/master/proto/contacts.proto
// https://developers.google.com/protocol-buffers/docs/proto
// https://github.com/grpc-ecosystem/grpc-gateway
// https://developers.google.com/protocol-buffers/docs/style

// Happy protobuffing!

// TODO: Write a protobuf schema for the UsersService service. The 
// messages and RPCs will compose the API for the service.

// TODO: Structure your own protobuf messages. Each protocol buffer message is a 
// small logical record of information, containing a series of name-value pairs.
message VersionResponse {
  string version = 1;
}

// TODO: Define the UsersService service and its methods. Feel free
// to change the name of UsersService to better-suit your naming
// conventions.
service UsersService {
  rpc GetVersion (google.protobuf.Empty) returns (VersionResponse) {
    // TODO: Provide mappings between REST endpoints and service methods.
    option (google.api.http) = {
      get: "/version"
    };
  }
}


message User {
  option (gorm.opts) = {
      ormable: true,
      multi_account: false
  };

  string id = 1 [(gorm.field).tag = {type: "UUID"  primary_key: true}];
  string name = 2;
  string email = 3;
  string password = 4;
  int32 coins = 5;
  int32 gems = 6;
  repeated StoreItem items = 7 [(gorm.field).many_to_many = {jointable: "users_store_items" preload: false}];
  UserStats stats = 8;
}

message CreateUserRequest {
  string name = 1;
  string email = 2;
  string password = 3;
}

message CreateUserResponse {
  User result = 1;
}

message ReadUserRequest {
  string id = 1;
}

message ReadUserResponse {
  User result = 1;
}

message UpdateUserRequest {
  string id = 1;
  string name = 2;
  string password = 3;
}

message UpdateUserResponse {}

message DeleteUserRequest {
  string id = 1;
}

message DeleteUserResponse {}

message ListUsersRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListUsersResponse {
  repeated User results = 1;
  infoblox.api.PageInfo page = 2;
}

message LoginRequest {
  string id = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
  google.protobuf.Timestamp expires_at = 2;
  bool isAdmin = 3;
  string user_id = 4;
}

message GrantCurrenciesRequest {
  string id = 1;
  int32 add_coins = 2;
  int32 add_gems = 3;
}

message GrantCurrenciesResponse {}

message GetUserCurrenciesRequest {
  string id = 1;
}

message GetUserCurrenciesResponse {
  int32 coins = 1;
  int32 gems = 2;
}

service Users {
  option (gorm.server) = {
      autogen: true,
      txn_middleware: false,
    };

  rpc Create (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
            post: "/users"
            body: "*"
        };
  }

  rpc Read (ReadUserRequest) returns (ReadUserResponse) {
    option (google.api.http) = {
            get: "/users/{id}"
        };
  }

  rpc Update (UpdateUserRequest) returns (UpdateUserResponse) {
    option (atlas_validate.method).allow_unknown_fields = false;
    option (google.api.http) = {
            put: "/users/{id}"
            body: "*"
            additional_bindings: {
                patch: "/users/{id}"
                body: "*"
            }
    };
  }

  rpc Delete (DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
            delete: "/users/{id}"
        };
    option (gorm.method).object_type = "User";
  }

  rpc List (ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
            get: "/users"
        };
  }

  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
        post: "/users/login"
        body: "*"
    };
  }

  rpc GrantCurrencies (GrantCurrenciesRequest) returns (GrantCurrenciesResponse) {
    option (google.api.http) = {
      post: "/users/{id}/currencies"
      body: "*"
    };
  }

  rpc GetUserCurrencies (GetUserCurrenciesRequest) returns (GetUserCurrenciesResponse) {
    option (google.api.http) = {
      get: "/users/{id}/currencies"
    };
  }
}


message StoreItem {
  option (gorm.opts) = {
      ormable: true,
      multi_account: false
  };

  string id = 1 [(gorm.field).tag = {type: "UUID"  primary_key: true}];
  string name = 2;
  string description = 3;
  int32 type = 4;
  int32 coins_price = 5;
  int32 gems_price = 6;
  string image_id = 7;
  bool on_sale = 8;
  int32 sale_coins_price = 9;
  int32 sale_gems_price = 10;
}

message CreateStoreItemRequest {
  string name = 1;
  string description = 2;
  int32 type = 3;
  int32 coins_price = 4;
  int32 gems_price = 5;
  string image_id = 6;
  bool on_sale = 7;
  int32 sale_coins_price = 8;
  int32 sale_gems_price = 9;
}

message CreateStoreItemResponse {
  StoreItem result = 1;
}

message ReadStoreItemRequest {
  string id = 1;
}

message ReadStoreItemResponse {
  StoreItem result = 1;
}

message UpdateStoreItemRequest {
  StoreItem payload = 1;
  google.protobuf.FieldMask fields = 2;
}

message UpdateStoreItemResponse {
  StoreItem result = 1;
}

message DeleteStoreItemRequest {
  string id = 1;
}

message DeleteStoreItemResponse {}

message ListStoreItemsRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListStoreItemsResponse {
  repeated StoreItem results = 1;
  infoblox.api.PageInfo page = 2;
}

message BuyByUserRequest {
  string user_id = 1;
  string item_id = 2;
}

message BuyByUserResponse {}

message ThrowAwayByUserRequest {
  string user_id = 1;
  string item_id = 2;
}

message ThrowAwayByUserResponse {}

message EquipByUserRequest {
  string user_id = 1;
  string item_id = 2;
}

message EquipByUserResponse {}

message GetUserItemsIdsRequest {
  string user_id = 1;
}

message UserItemInfo {
  string item_id = 1;
  bool equipped = 2;
}

message GetUserItemsIdsResponse {
  repeated UserItemInfo items = 1;
}

message GetEquippedUserItemsIdsRequest {
  string user_id = 1;
}

message GetEquippedUserItemsIdsResponse {
  repeated UserItemInfo items = 1;
}

service StoreItems {
  option (gorm.server) = {
      autogen: true,
      txn_middleware: false,
    };

  rpc Create (CreateStoreItemRequest) returns (CreateStoreItemResponse) {
    option (google.api.http) = {
            post: "/store_items"
            body: "*"
        };
  }

  rpc Read (ReadStoreItemRequest) returns (ReadStoreItemResponse) {
    option (google.api.http) = {
            get: "/store_items/{id}"
        };
  }

  rpc Update (UpdateStoreItemRequest) returns (UpdateStoreItemResponse) {
    option (atlas_validate.method).allow_unknown_fields = false;
    option (google.api.http) = {
            put: "/store_items/{payload.id}"
            body: "payload"
            additional_bindings: {
                patch: "/store_items/{payload.id}"
                body: "payload"
            }
    };
  }

  rpc Delete (DeleteStoreItemRequest) returns (DeleteStoreItemResponse) {
    option (google.api.http) = {
            delete: "/store_items/{id}"
        };
    option (gorm.method).object_type = "StoreItem";
  }

  rpc List (ListStoreItemsRequest) returns (ListStoreItemsResponse) {
    option (google.api.http) = {
            get: "/store_items"
        };
  }

  rpc BuyByUser (BuyByUserRequest) returns (BuyByUserResponse) {
    option (google.api.http) = {
            post: "/store_items/buy"
            body: "*"
        };
  }

  rpc GetUserItemsIds (GetUserItemsIdsRequest) returns (GetUserItemsIdsResponse) {
    option (google.api.http) = {
            get: "/store_items/user/{user_id}"
        };
  }

  rpc GetEquippedUserItemsIds (GetEquippedUserItemsIdsRequest) returns (GetEquippedUserItemsIdsResponse) {
    option (google.api.http) = {
            get: "/store_items/user/{user_id}/equipped"
        };
  }

  rpc EquipByUser (EquipByUserRequest) returns (EquipByUserResponse) {
    option (google.api.http) = {
            post: "/store_items/equip"
            body: "*"
        };
  }

  rpc ThrowAwayByUser (ThrowAwayByUserRequest) returns (ThrowAwayByUserResponse) {
    option (google.api.http) = {
            post: "/store_items/throwaway"
            body: "*"
        };
  }
}

message UserStats {
  option (gorm.opts) = {
      ormable: true,
      multi_account: false
  };

  int32 id = 1 [(gorm.field).tag = {type: "serial"  primary_key: true}];
  int32 games = 2;
  int32 wins = 3;
  int32 top5 = 4;
  int32 kills = 5;
}

message ReadUserStatsRequest {
  string username = 1;
}

message ReadUserStatsResponse {
  UserStats result = 1;
}

message UpdateUserStatsRequest {
  string username = 1;
  int32 add_games = 2;
  int32 add_wins = 3;
  int32 add_top5 = 4;
  int32 add_kills = 5;
}

message UpdateUserStatsResponse {}

service UsersStats {
  option (gorm.server) = {
      autogen: true,
      txn_middleware: false,
    };

  rpc GetStats (ReadUserStatsRequest) returns (ReadUserStatsResponse) {
    option (google.api.http) = {
            get: "/stats/{username}"
        };
  }

  rpc UpdateStats (UpdateUserStatsRequest) returns (UpdateUserStatsResponse) {
    option (atlas_validate.method).allow_unknown_fields = false;
    option (google.api.http) = {
            put: "/stats/{username}"
            body: "*"
            additional_bindings: {
                patch: "/stats/{username}"
                body: "*"
            }
    };
  }
}

message News {
  option (gorm.opts) = {
      ormable: true,
      multi_account: false
  };

  string id = 1 [(gorm.field).tag = {type: "UUID"  primary_key: true}];
  google.protobuf.Timestamp created_at = 2;
  string title = 3;
  string description = 4;
  string image_link = 5;
}

message CreateNewsRequest {
  string title = 1;
  string description = 2;
  string image_link = 3;
}

message CreateNewsResponse {
  News result = 1;
}

message ReadNewsRequest {
  string id = 1;
}

message ReadNewsResponse {
  News result = 1;
}

message UpdateNewsRequest {
  string id = 1;
  string title = 2;
  string description = 3;
  string image_link = 4;
}

message UpdateNewsResponse {}

message ListNewsRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListNewsResponse {
  repeated News results = 1;
  infoblox.api.PageInfo page = 2;
}

service NewsService {
  option (gorm.server) = {
      autogen: true,
      txn_middleware: false,
    };

  rpc Create (CreateNewsRequest) returns (CreateNewsResponse) {
    option (google.api.http) = {
            post: "/news"
            body: "*"
        };
  }

  rpc Read (ReadNewsRequest) returns (ReadNewsResponse) {
    option (google.api.http) = {
            get: "/news/{id}"
        };
  }

  rpc Update (UpdateNewsRequest) returns (UpdateNewsResponse) {
    option (atlas_validate.method).allow_unknown_fields = false;
    option (google.api.http) = {
            put: "/news/{id}"
            body: "*"
            additional_bindings: {
                patch: "/news/{id}"
                body: "*"
            }
    };
  }

  rpc List (ListNewsRequest) returns (ListNewsResponse) {
    option (google.api.http) = {
            get: "/news"
        };
  }
}
